#!/usr/bin/env bash
set -euo pipefail

# Configuration
readonly DIR="${HOME}/.speechbubble"
readonly FILE="${DIR}/rec"
readonly MAX_DURATION=300
readonly MODELS_DIR="${DIR}/models"
readonly MODEL_NAME="base.en"
readonly CONTAINER_NAME="speechbubble"
readonly AUDIO_DEVICE="default"

if [[ "$(uname)" == "Darwin" ]]; then
    echo "MacOS detected. Setting up PulseAudio..."
    # Check if pulseaudio is running
    if ! command -v pulseaudio >/dev/null; then
        echo "Please install pulseaudio first:"
        echo "  brew install pulseaudio"
        exit 1
    fi
    if ! pulseaudio --check; then
        echo "Starting PulseAudio daemon..."
        pulseaudio --load=module-native-protocol-tcp --exit-idle-time=-1 --daemon
    fi
    readonly DOCKER_AUDIO_FLAGS="-e PULSE_SERVER=docker.for.mac.localhost -v ~/.config/pulse:/root/.config/pulse"
else
    # On Linux, PulseAudio is usually already running
    readonly DOCKER_AUDIO_FLAGS="-v /run/user/$(id -u)/pulse:/run/user/1000/pulse -e PULSE_SERVER=unix:/run/user/1000/pulse/native"
fi

mkdir -p "$DIR"

# Update the ensure_image function with pulseaudio support
ensure_image() {
  if (! docker image inspect speechbubble:latest >/dev/null 2>&1); then
    echo "Building custom Docker image..."
    docker build -t speechbubble:latest - <<'DOCKERFILE'
FROM ghcr.io/ggml-org/whisper.cpp:main

RUN apt-get update && apt-get install -y \
    pulseaudio \
    pulseaudio-utils \
    && rm -rf /var/lib/apt/lists/*
DOCKERFILE
  fi
}

# Update start_recording to use pulseaudio instead of parec
start_recording() {
  echo "Started recording..."
  input_name=$(basename "$FILE.wav")

  docker run -d --rm \
    --name "$CONTAINER_NAME" \
    $DOCKER_AUDIO_FLAGS \
    --network none \
    -v "$DIR:/data" \
    speechbubble:latest \
    "parec -d 1 --file-format=wav /data/$input_name"
}

stop_recording() {
  echo "Stopping recording..."
  if [ "$(docker ps -q --filter "name=$CONTAINER_NAME")" != "" ]; then
    echo "Recording container found. Stopping..."
    # Send SIGINT to parec process inside the container
    docker exec "$CONTAINER_NAME" pkill -SIGINT parec
    echo "Waiting for recording to finish..."
    # Wait for container to exit gracefully
    docker wait "$CONTAINER_NAME"
    return 0
  fi
  echo "No recording container found."
}

write_transcript() {
  # Remove trailing newline if it exists and write to temp file
  [ -f "$FILE.txt" ] && printf "%s" "$(<"$FILE.txt")" >"$FILE.txt.tmp" && mv "$FILE.txt.tmp" "$FILE.txt"
  xdotool type --clearmodifiers --file "$FILE.txt"
}

ensure_model() {

  # Check if image exists, pull if not
  if [ ! docker image inspect ghcr.io/ggml-org/whisper.cpp:main ] >/dev/null 2>&1; then
    echo "Whisper.cpp Docker image not found. Pulling..."
    docker pull ghcr.io/ggml-org/whisper.cpp:main
  fi

  mkdir -p "$MODELS_DIR"
  if [ ! -f "${MODELS_DIR}/ggml-${MODEL_NAME}.bin" ]; then
    echo "Downloading whisper model..."
    docker run -it --rm \
      -v "${MODELS_DIR}:/models" \
      ghcr.io/ggml-org/whisper.cpp:main \
      "./models/download-ggml-model.sh ${MODEL_NAME} /models"
  fi
}

transcribe_with_whispercpp() {
  echo "Transcribing with whisper.cpp..."

  input_name=$(basename "$FILE.wav")

  ensure_model

  docker run --rm \
    -v "${MODELS_DIR}:/models" \
    -v "$DIR:/data" \
    --network none \
    speechbubble:latest \
    "whisper-cli -m /models/ggml-${MODEL_NAME}.bin -np -nt -f /data/${input_name}" >"$FILE.txt"

  if [ ! -s "$FILE.txt" ]; then
    echo "Error: Transcription failed"
    exit 1
  fi

  echo "Transcription completed"
}

main() {
  ensure_image
  if [ "$(docker ps -q --filter "name=$CONTAINER_NAME")" != "" ]; then
    stop_recording
    transcribe_with_whispercpp
    write_transcript
  else
    start_recording
  fi
}

main
